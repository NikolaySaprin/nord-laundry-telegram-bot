import { Bot, Context } from 'grammy';
import { Application } from '../types/application-types';

export class ApplicationBot {
  private bot: Bot;
  private groupChatId: string;
  private activeThreads: Map<string, number> = new Map(); // –•—Ä–∞–Ω–∏—Ç thread_id –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  private threadToUser: Map<number, number> = new Map(); // –•—Ä–∞–Ω–∏—Ç telegramUserId –ø–æ thread_id –¥–ª—è —Å–≤—è–∑–∏ —Ç–µ–º —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏

  constructor(token: string, groupChatId: string) {
    if (!token) {
      throw new Error('Telegram bot token is required');
    }
    if (!groupChatId) {
      throw new Error('Group chat ID is required');
    }
    this.groupChatId = groupChatId;
    this.bot = new Bot(token);
    this.setupHandlers();
  }

  private setupHandlers() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    this.bot.command('start', async (ctx: Context) => {
      await ctx.reply(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ –Ω–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —Å–≤—è–∂—É—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.`);
    });

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö
    this.bot.on('message', async (ctx: Context) => {
      if (ctx.chat?.type === 'private') {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤
        const user = ctx.from;
        const messageText = ctx.message?.text;
        
        if (!user || !messageText) return;

        // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
        const application: Application = {
          source: 'telegram_direct',
          userIdentifierTelegram: `tg_${user.username || user.id}`,
          userNameTelegram: `${user.first_name || ''} ${user.last_name || ''}`.trim() || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          userUsernameTelegram: user.username || undefined,
          userMessage: messageText,
          telegramUserId: user.id,
          name: `${user.first_name || ''} ${user.last_name || ''}`.trim() || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', // –ò–º—è –¥–ª—è –æ–±—â–µ–≥–æ –ø–æ–ª—è
          phone: '–ù–µ —É–∫–∞–∑–∞–Ω' // –í Telegram —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        };

        await this.handleNewApplication(application);
        await ctx.reply("–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É!\n–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –í–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è");
      } else if (ctx.chat?.id.toString() === this.groupChatId.toString()) {
        if (ctx.message?.message_thread_id) {
          // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ–º–∞—Ö —Ñ–æ—Ä—É–º–∞ (–æ—Ç–≤–µ—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤)
          await this.handleManagerReply(ctx);
        } else {
          // –°–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–±—â–µ–º —á–∞—Ç–µ –≥—Ä—É–ø–ø—ã –±–µ–∑ thread_id –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è
          console.log('–ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±—â–µ–º —á–∞—Ç–µ –≥—Ä—É–ø–ø—ã (–±–µ–∑ thread_id):', {
            chatId: ctx.chat?.id,
            fromUserId: ctx.from?.id,
            messageText: ctx.message?.text || ctx.message?.caption
          });
        }
      }
    });
  }

  async handleNewApplication(application: Application): Promise<void> {
    try {
      const userIdentifier = application.userIdentifierTelegram || `website_${application.phone}`;
      let threadId = this.activeThreads.get(userIdentifier);
      
      if (!threadId) {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–µ–º—É —Ñ–æ—Ä—É–º–∞
        const topicName = this.generateTopicName(application);
        
        const topic = await this.bot.api.createForumTopic(
          this.groupChatId, 
          topicName
        );
        
        threadId = topic.message_thread_id;
        this.activeThreads.set(userIdentifier, threadId);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å –º–µ–∂–¥—É thread_id –∏ telegramUserId –¥–ª—è Telegram –∑–∞—è–≤–æ–∫
        if (application.telegramUserId) {
          this.threadToUser.set(threadId, application.telegramUserId);
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ
        const message = this.formatApplicationMessage(application);
        await this.bot.api.sendMessage(
          this.groupChatId, 
          message,
          { message_thread_id: threadId }
        );
      } else {
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–µ–º—É
        const message = this.formatNewMessage(application);
        await this.bot.api.sendMessage(
          this.groupChatId,
          message,
          { message_thread_id: threadId }
        );
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏:', error);
    }
  }

  private generateTopicName(application: Application): string {
    const sourceLabels: Record<Application['source'], string> = {
      'website_form': '–°–∞–π—Ç',
      'contact_form': '–§–æ—Ä–º–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞',
      'bottom_form': '–ù–∏–∂–Ω—è—è —Ñ–æ—Ä–º–∞',
      'services_form': '–£—Å–ª—É–≥–∏',
      'modal_form': '–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ',
      'whatsapp': 'WhatsApp',
      'telegram_direct': 'Telegram'
    };
    
    const sourceLabel = sourceLabels[application.source] || '–°–∞–π—Ç';
    
    switch (application.source) {
      case 'telegram_direct':
        return `${sourceLabel}: @${application.userUsernameTelegram || application.telegramUserId}`;
      default:
        return `${sourceLabel}: ${application.name} (${application.phone})`;
    }
  }

  private formatApplicationMessage(application: Application): string {
    const sourceLabels: Record<Application['source'], string> = {
      'website_form': '—Å —Å–∞–π—Ç–∞',
      'contact_form': '–∏–∑ —Ñ–æ—Ä–º—ã –∫–æ–Ω—Ç–∞–∫—Ç–∞',
      'bottom_form': '–∏–∑ –Ω–∏–∂–Ω–µ–π —Ñ–æ—Ä–º—ã',
      'services_form': '–∏–∑ —Ä–∞–∑–¥–µ–ª–∞ —É—Å–ª—É–≥',
      'modal_form': '–∏–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞',
      'whatsapp': '–∏–∑ WhatsApp',
      'telegram_direct': '–∏–∑ Telegram'
    };
    
    const sourceLabel = sourceLabels[application.source] || '—Å —Å–∞–π—Ç–∞';
    
    let message: string;
    
    if (application.source === 'telegram_direct') {
      message = `üí¨ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ${sourceLabel}:\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${application.userNameTelegram}${application.userUsernameTelegram ? ` (@${application.userUsernameTelegram})` : ''}\nüìù –í–æ–ø—Ä–æ—Å: ${application.userMessage}`;
    } else {
      message = `üìã –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ${sourceLabel}:\n\nüë§ –ò–º—è: ${application.name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: ${application.phone}`;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ñ–µ—Ä—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
    if (application.sphere) {
      message += `\nüè¢ –°—Ñ–µ—Ä–∞: ${application.sphere}`;
    }
    
    message += `\n‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}\n\n–°—Ç–∞—Ç—É—Å: ‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏`;
    
    return message;
  }

  private formatNewMessage(application: Application): string {
    return `üìù –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞—è–≤–∫–µ:\n\n${application.userMessage || '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞'}\n‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –≤ –≥—Ä—É–ø–ø–µ
  private async handleManagerReply(ctx: Context): Promise<void> {
    try {
      const message = ctx.message;
      const from = ctx.from;
      
      console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–º–µ —Ñ–æ—Ä—É–º–∞:', {
        chatId: ctx.chat?.id,
        threadId: message?.message_thread_id,
        fromUserId: from?.id,
        messageText: message?.text || message?.caption
      });
      
      if (!message || !from || !message.message_thread_id) {
        console.log('–ü—Ä–æ–ø—É—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ');
        return;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
      const messageText = message.text || message.caption || '';
      if (!messageText.trim()) {
        console.log('–ü—Ä–æ–ø—É—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è: –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç');
        return;
      }
      
      // –ù–∞—Ö–æ–¥–∏–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ thread_id
      const clientUserId = this.threadToUser.get(message.message_thread_id);
      if (!clientUserId) {
        console.log('–ù–µ –Ω–∞–π–¥–µ–Ω –∫–ª–∏–µ–Ω—Ç –¥–ª—è thread_id:', message.message_thread_id);
        console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ thread_id:', Array.from(this.threadToUser.keys()));
        return;
      }
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞
      const managerName = this.formatManagerSignature(from);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É —Å –ø–æ–¥–ø–∏—Å—å—é
      const responseMessage = `${messageText}\n\n*–û—Ç–≤–µ—Ç –æ—Ç ${managerName}*`;
      
      await this.sendToUser(clientUserId, responseMessage);
      
      console.log(`–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É ${clientUserId} –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ ${from.id}`);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:', error);
    }
  }
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
  private formatManagerSignature(manager: any): string {
    const firstName = manager.first_name || '';
    const lastName = manager.last_name || '';
    const username = manager.username;
    
    let signature = '';
    
    if (firstName || lastName) {
      signature = `${firstName} ${lastName}`.trim();
    } else {
      signature = '–ú–µ–Ω–µ–¥–∂–µ—Ä';
    }
    
    if (username) {
      signature += ` (@${username})`;
    }
    
    return signature;
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–¥–ª—è Telegram)
  async sendToUser(userId: number, message: string): Promise<void> {
    try {
      await this.bot.api.sendMessage(userId, message, { parse_mode: 'Markdown' });
      console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
    } catch (error: any) {
      console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, error);
      
      // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º Markdown, –ø–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      if (error.description && error.description.includes('parse')) {
        try {
          const plainMessage = message.replace(/\*([^*]+)\*/g, '$1'); // –£–±–∏—Ä–∞–µ–º Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
          await this.bot.api.sendMessage(userId, plainMessage);
          console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId} –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è`);
        } catch (retryError) {
          console.error(`–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, retryError);
        }
      }
    }
  }

  start(): void {
    this.bot.start();
    console.log('Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω');
  }
}