import { Bot, Context } from 'grammy';
import { Application, ManagerReply } from '../types/application-types.js';
import { WhatsAppService } from './whatsapp-service.js';

export class ApplicationBot {
  private bot: Bot;
  private groupChatId: string;
  private activeThreads: Map<string, number> = new Map();
  private threadToUser: Map<number, { userId?: string; platform: 'telegram' | 'whatsapp'; userIdentifier: string }> = new Map();
  private thanksMessageSent: Set<string> = new Set();
  private whatsappService?: WhatsAppService;

  constructor(token: string, groupChatId: string, enableWhatsApp: boolean = false) {
    console.log('üîß ==========================================');
    console.log('üîß –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø APPLICATIONBOT');
    console.log('üîß ==========================================');
    console.log('üîß TELEGRAM_BOT_TOKEN:', token ? '‚úÖ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    console.log('üîß TELEGRAM_GROUP_CHAT_ID:', groupChatId ? '‚úÖ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    console.log('üîß ENABLE_WHATSAPP:', enableWhatsApp ? '‚úÖ true' : '‚ùå false');
    console.log('üîß ==========================================');
    
    if (!token) {
      throw new Error('Telegram bot token is required');
    }
    if (!groupChatId) {
      throw new Error('Group chat ID is required');
    }
    this.groupChatId = groupChatId;
    this.bot = new Bot(token);
    
    if (enableWhatsApp) {
      console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WhatsApp —Å–µ—Ä–≤–∏—Å...');
      this.whatsappService = new WhatsAppService();
      console.log('‚úÖ WhatsAppService —Å–æ–∑–¥–∞–Ω');
      
      console.log('üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞—è–≤–æ–∫...');
      this.whatsappService.setApplicationHandler((application: Application) => this.handleNewApplication(application));
      console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞—è–≤–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      
      console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: WhatsApp –∫–ª–∏–µ–Ω—Ç –µ—â–µ –ù–ï –ó–ê–ü–£–©–ï–ù!');
      console.log('üí° –ó–∞–ø—É—Å–∫ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –ø—Ä–∏ –≤—ã–∑–æ–≤–µ start()');
    } else {
      console.log('‚ö†Ô∏è WhatsApp —Å–µ—Ä–≤–∏—Å –æ—Ç–∫–ª—é—á–µ–Ω (ENABLE_WHATSAPP=false)');
    }
    
    console.log('üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Telegram –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏...');
    this.setupHandlers();
    console.log('‚úÖ Telegram –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    console.log('üîß ==========================================');
  }

  private setupHandlers() {
    this.bot.command('start', async (ctx: Context) => {
      await ctx.reply(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ –Ω–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —Å–≤—è–∂—É—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.`);
    });

    this.bot.on('message', async (ctx: Context) => {
      if (ctx.chat?.type === 'private') {
        const user = ctx.from;
        const messageText = ctx.message?.text;
        
        if (!user || !messageText) return;

        const application: Application = {
          source: 'telegram_direct',
          userIdentifierTelegram: `tg_${user.username || user.id}`,
          userNameTelegram: `${user.first_name || ''} ${user.last_name || ''}`.trim() || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          userUsernameTelegram: user.username || undefined,
          userMessage: messageText,
          telegramUserId: user.id,
          name: `${user.first_name || ''} ${user.last_name || ''}`.trim() || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          phone: '–ù–µ —É–∫–∞–∑–∞–Ω',
          messageType: 'text'
        };

        await this.handleNewApplication(application);
        
        const userIdentifier = `tg_${user.id}`;
        if (!this.thanksMessageSent.has(userIdentifier)) {
          await ctx.reply("–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É!\n–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –í–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è");
          this.thanksMessageSent.add(userIdentifier);
        }
      } else if (ctx.chat?.id.toString() === this.groupChatId.toString()) {
        if (ctx.message?.message_thread_id) {
          await this.handleManagerReply(ctx);
        } else {
          console.log('–ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±—â–µ–º —á–∞—Ç–µ –≥—Ä—É–ø–ø—ã (–±–µ–∑ thread_id):', {
            chatId: ctx.chat?.id,
            fromUserId: ctx.from?.id,
            messageText: ctx.message?.text || ctx.message?.caption
          });
        }
      }
    });
  }

  async handleNewApplication(application: Application): Promise<void> {
    try {
      console.log('üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É:', {
        source: application.source,
        userMessage: application.userMessage,
        userName: application.name
      });


      let userIdentifier: string;
      let platform: 'whatsapp' | 'telegram';
      let shouldCreateNewThread: boolean;
      
      if (application.source === 'whatsapp') {

        userIdentifier = application.whatsappUserId!;
        platform = 'whatsapp';

        shouldCreateNewThread = !this.activeThreads.has(userIdentifier);
      } else if (application.source === 'telegram_direct') {

        userIdentifier = application.userIdentifierTelegram!;
        platform = 'telegram';

        shouldCreateNewThread = !this.activeThreads.has(userIdentifier);
      } else {


        const timestamp = Date.now();
        userIdentifier = `website_${application.source}_${application.phone}_${timestamp}`;
        platform = 'telegram';
        shouldCreateNewThread = true;
      }
      
      let threadId = this.activeThreads.get(userIdentifier);

      console.log('üîç –ê–Ω–∞–ª–∏–∑ –∑–∞—è–≤–∫–∏:', {
        source: application.source,
        userIdentifier,
        platform,
        existingThreadId: threadId,
        shouldCreateNewThread,
        isWebsiteForm: !['whatsapp', 'telegram_direct'].includes(application.source)
      });
      
      if (shouldCreateNewThread) {

        const topicName = this.generateTopicName(application);
        console.log('üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–µ–º—É —Ñ–æ—Ä—É–º–∞:', topicName);
        
        const topic = await this.bot.api.createForumTopic(
          this.groupChatId, 
          topicName
        );
        
        threadId = topic.message_thread_id;
        this.activeThreads.set(userIdentifier, threadId);
        this.threadToUser.set(threadId, {
          userId: application.whatsappUserId || application.telegramUserId?.toString(),
          platform,
          userIdentifier
        });
        
        console.log('‚úÖ –ù–æ–≤–∞—è —Ç–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å ID:', threadId);
        

        const message = this.formatApplicationMessage(application);
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ –≤ —Ç–µ–º—É:', threadId);
        await this.bot.api.sendMessage(
          this.groupChatId, 
          message,
          { message_thread_id: threadId }
        );
        console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
      } else {

        console.log('üìù –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–µ–º—É:', threadId);
        const message = this.formatNewMessage(application);
        await this.bot.api.sendMessage(
          this.groupChatId,
          message,
          { message_thread_id: threadId }
        );
        console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–µ–º—É');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏:', error);
    }
  }

  private generateTopicName(application: Application): string {
    const sourceLabels: Record<Application['source'], string> = {
      'website_form': '–°–∞–π—Ç',
      'contact_form': '–§–æ—Ä–º–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞',
      'bottom_form': '–ù–∏–∂–Ω—è—è —Ñ–æ—Ä–º–∞',
      'services_form': '–£—Å–ª—É–≥–∏',
      'modal_form': '–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ',
      'whatsapp': 'WhatsApp',
      'telegram_direct': 'Telegram'
    };
    
    const sourceLabel = sourceLabels[application.source] || '–°–∞–π—Ç';
    
    switch (application.source) {
      case 'telegram_direct':
        return `${sourceLabel}: @${application.userUsernameTelegram || application.telegramUserId}`;
      case 'whatsapp':
        return `${sourceLabel}: ${application.whatsappUserName} (${application.whatsappUserPhone})`;
      default:
        return `${sourceLabel}: ${application.name} (${application.phone})`;
    }
  }

  private formatApplicationMessage(application: Application): string {
    const sourceLabels: Record<Application['source'], string> = {
      'website_form': '—Å —Å–∞–π—Ç–∞',
      'contact_form': '–∏–∑ —Ñ–æ—Ä–º—ã –∫–æ–Ω—Ç–∞–∫—Ç–∞',
      'bottom_form': '–∏–∑ –Ω–∏–∂–Ω–µ–π —Ñ–æ—Ä–º—ã',
      'services_form': '–∏–∑ —Ä–∞–∑–¥–µ–ª–∞ —É—Å–ª—É–≥',
      'modal_form': '–∏–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞',
      'whatsapp': '–∏–∑ WhatsApp',
      'telegram_direct': '–∏–∑ Telegram'
    };
    
    const sourceLabel = sourceLabels[application.source] || '—Å —Å–∞–π—Ç–∞';
    

    const moscowTime = new Date().toLocaleString('ru-RU', { 
      timeZone: 'Europe/Moscow',
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });
    
    let message: string;
    
    if (application.source === 'telegram_direct') {
      message = `üí¨ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ${sourceLabel}:\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${application.userNameTelegram}${application.userUsernameTelegram ? ` (@${application.userUsernameTelegram})` : ''}\nüìù –í–æ–ø—Ä–æ—Å: ${application.userMessage}`;
    } else if (application.source === 'whatsapp') {
      message = `üí¨ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ${sourceLabel}:

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${application.whatsappUserName}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${application.whatsappUserPhone}
üìù –í–æ–ø—Ä–æ—Å: ${application.userMessage}`;
    } else {
      message = `üìã –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ${sourceLabel}:\n\nüë§ –ò–º—è: ${application.name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: ${application.phone}`;
    }
    

    if (application.sphere) {
      message += `\nüè¢ –°—Ñ–µ—Ä–∞: ${application.sphere}`;
    }
    

    if (application.mediaUrls && application.mediaUrls.length > 0) {
      const mediaTypeLabels: Record<Application['messageType'], string> = {
        'text': 'üìù',
        'image': 'üñºÔ∏è',
        'video': 'üé•',
        'document': 'üìÑ',
        'audio': 'üéµ'
      };
      const mediaLabel = mediaTypeLabels[application.messageType] || 'üìé';
      message += `\n${mediaLabel} –ú–µ–¥–∏–∞: ${application.mediaUrls.length} —Ñ–∞–π–ª(–æ–≤)`;
    }
    
    message += `\n‚è∞ –í—Ä–µ–º—è: ${moscowTime} (–ú–°–ö)\n\n–°—Ç–∞—Ç—É—Å: ‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏`;
    
    return message;
  }

  private formatNewMessage(application: Application): string {

    const moscowTime = new Date().toLocaleString('ru-RU', { 
      timeZone: 'Europe/Moscow',
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });
    
    return `üìù –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞—è–≤–∫–µ:\n\n${application.userMessage || '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞'}\n‚è∞ –í—Ä–µ–º—è: ${moscowTime} (–ú–°–ö)`;
  }


  private async handleManagerReply(ctx: Context): Promise<void> {
    try {
      const message = ctx.message;
      const from = ctx.from;
      
      console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–º–µ —Ñ–æ—Ä—É–º–∞:', {
        chatId: ctx.chat?.id,
        threadId: message?.message_thread_id,
        fromUserId: from?.id,
        messageText: message?.text || message?.caption
      });
      
      if (!message || !from || !message.message_thread_id) {
        console.log('–ü—Ä–æ–ø—É—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ');
        return;
      }
      
      // –ö–†–ò–¢–ò–ß–ù–û: –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
      const botInfo = await this.bot.api.getMe();
      if (from.id === botInfo.id) {
        console.log('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–∞–º–æ–≥–æ –±–æ—Ç–∞');
        return;
      }
      

      const messageText = message.text || message.caption || '';
      if (!messageText.trim()) {
        console.log('–ü—Ä–æ–ø—É—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è: –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç');
        return;
      }
      

      const userData = this.threadToUser.get(message.message_thread_id);
      if (!userData) {
        console.log('–ù–µ –Ω–∞–π–¥–µ–Ω –∫–ª–∏–µ–Ω—Ç –¥–ª—è thread_id:', message.message_thread_id);
        console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ thread_id:', Array.from(this.threadToUser.keys()));
        return;
      }
      

      const managerName = this.formatManagerSignature(from);
      const managerUsername = from.username ? `@${from.username}` : '–ú–µ–Ω–µ–¥–∂–µ—Ä';
      

      const mediaUrls: string[] = [];






      if (message.video) {
        const file = await this.bot.api.getFile(message.video.file_id);
        mediaUrls.push(`https://api.telegram.org/file/bot${this.bot.token}/${file.file_path}`);
      }
      if (message.document) {
        const file = await this.bot.api.getFile(message.document.file_id);
        mediaUrls.push(`https://api.telegram.org/file/bot${this.bot.token}/${file.file_path}`);
      }
      if (message.audio) {
        const file = await this.bot.api.getFile(message.audio.file_id);
        mediaUrls.push(`https://api.telegram.org/file/bot${this.bot.token}/${file.file_path}`);
      }
      
      const managerReply: ManagerReply = {
        threadId: message.message_thread_id,
        targetUserId: userData.userIdentifier, // –ò—Å–ø–æ–ª—å–∑—É–µ–º userIdentifier –≤–º–µ—Å—Ç–æ userId
        targetPlatform: userData.platform,
        managerName,
        managerUsername,
        message: messageText,
        mediaUrls: mediaUrls.length > 0 ? mediaUrls : undefined
      };

      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞:', {
        platform: userData.platform,
        targetUserId: userData.userIdentifier,
        messagePreview: messageText.substring(0, 50)
      });

      if (userData.platform === 'telegram' && userData.userId) {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
        const messageWithSignature = `${messageText}\n\n_–ú–µ–Ω–µ–¥–∂–µ—Ä: ${managerName}_`;
        await this.sendToUser(parseInt(userData.userId), messageWithSignature);
        console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram:', userData.userId);
      } else if (userData.platform === 'whatsapp' && this.whatsappService) {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ WhatsApp
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ WhatsApp:', managerReply);
        const success = await this.whatsappService.sendManagerReply(managerReply);
        if (success) {
          console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ WhatsApp:', userData.userIdentifier);
        } else {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ WhatsApp');
        }
      } else {
        console.warn('‚ö†Ô∏è  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∏–ª–∏ WhatsApp —Å–µ—Ä–≤–∏—Å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
      }
      
      console.log(`–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É ${userData.userId} (${userData.platform}) –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ ${from.id}`);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:', error);
    }
  }
  

  private formatManagerSignature(manager: any): string {
    const firstName = manager.first_name || '';
    const lastName = manager.last_name || '';
    const username = manager.username;
    
    let signature = '';
    
    if (firstName || lastName) {
      signature = `${firstName} ${lastName}`.trim();
    } else {
      signature = '–ú–µ–Ω–µ–¥–∂–µ—Ä';
    }
    
    if (username) {
      signature += ` (@${username})`;
    }
    
    return signature;
  }


  async sendToUser(userId: number, message: string): Promise<void> {
    try {
      await this.bot.api.sendMessage(userId, message, { parse_mode: 'Markdown' });
      console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
    } catch (error: any) {
      console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, error);
      

      if (error.description && error.description.includes('parse')) {
        try {
          const plainMessage = message.replace(/\*([^*]+)\*/g, '$1');
          await this.bot.api.sendMessage(userId, plainMessage);
          console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId} –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è`);
        } catch (retryError) {
          console.error(`–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, retryError);
        }
      }
    }
  }


  start(): void {
    console.log('üöÄ ==========================================');
    console.log('üöÄ –ó–ê–ü–£–°–ö APPLICATIONBOT');
    console.log('üöÄ ==========================================');
    
    console.log('üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...');
    this.bot.start();
    console.log('‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω');
    
    if (this.whatsappService) {
      console.log('üöÄ –ó–ê–ü–£–°–ö WHATSAPP –°–ï–†–í–ò–°–ê...');
      this.whatsappService.start();
      console.log('‚úÖ WhatsApp —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω');
    } else {
      console.log('‚ö†Ô∏è WhatsApp —Å–µ—Ä–≤–∏—Å –ù–ï –î–û–°–¢–£–ü–ï–ù - –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ Telegram');
    }
    
    console.log('üöÄ ==========================================');
  }

  stop(): void {
    if (this.whatsappService) {
      this.whatsappService.stop();
    }
  }
}