import pkg from 'whatsapp-web.js';
const { Client, LocalAuth, MessageMedia } = pkg;
import type { Message } from 'whatsapp-web.js';
import * as qrcode from 'qrcode-terminal';
import { Application, ManagerReply } from '../types/application-types.js';

export class WhatsAppService {
  private client: any;
  private thanksMessageSent: Set<string> = new Set();
  private onNewApplication?: (application: Application) => Promise<void>;
  private restartAttempts: number = 0;

  constructor() {
    // –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ –î–û —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    const forceReset = process.env.WHATSAPP_FORCE_RESET === 'true';
    if (forceReset) {
      console.log('üö® –†–ï–ñ–ò–ú –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ì–û –°–ë–†–û–°–ê: WHATSAPP_FORCE_RESET=true');
      console.log('üóëÔ∏è  .wwebjs_auth –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ');
    }
    
    this.client = new Client({
      authStrategy: new LocalAuth({
        clientId: "nord-laundry-whatsapp",
        dataPath: "./.wwebjs_auth"
      }),
      puppeteer: {
        headless: true,

        executablePath: process.env.NODE_ENV === 'production' ? '/usr/bin/chromium-browser' : undefined,
        args: [
          '--no-sandbox',
          '--disable-setuid-sandbox',
          '--disable-dev-shm-usage',
          '--disable-accelerated-2d-canvas',
          '--no-first-run',
          '--no-zygote',
          '--single-process',
          '--disable-gpu',
          '--disable-software-rasterizer',
          // –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º ./tmp –≤–º–µ—Å—Ç–æ /tmp
          '--user-data-dir=./tmp/chromium-user-data',
          '--data-path=./tmp/chromium-data',
          '--disk-cache-dir=./tmp/chromium-cache',
          '--disable-web-security',
          '--disable-features=VizDisplayCompositor',
          '--disable-background-timer-throttling',
          '--disable-backgrounding-occluded-windows',
          '--disable-renderer-backgrounding',
          '--disable-extensions',
          '--disable-plugins',
          '--disable-default-apps',
          '--disable-sync',
          '--disable-translate',
          '--hide-scrollbars',
          '--mute-audio',
          '--no-default-browser-check',
          '--no-pings',
          '--disable-logging',
          '--disable-permissions-api',
          '--disable-presentation-api',
          '--disable-print-preview',
          '--disable-speech-api',
          '--disable-file-system',
          '--disable-notifications',
          '--disable-background-networking',
          '--disable-component-extensions-with-background-pages',
          '--disable-ipc-flooding-protection',
          '--disable-client-side-phishing-detection',
          '--disable-sync',
          '--disable-default-apps',
          '--disable-extensions-file-access-check',
          '--disable-component-extensions-with-background-pages',
          '--user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
        ],
        timeout: 60000,
        ignoreDefaultArgs: ['--disable-extensions'],
        handleSIGINT: false,
        handleSIGTERM: false,
        handleSIGHUP: false
      },
      webVersionCache: {
        type: 'remote',
        remotePath: 'https://raw.githubusercontent.com/wppconnect-team/wa-version/main/html/2.2412.54.html',
      },

      authTimeoutMs: 0,
      qrMaxRetries: 0,
      restartOnAuthFail: false,
      takeoverOnConflict: false,
      takeoverTimeoutMs: 0
    });

    this.setupEventHandlers();
  }

  private setupEventHandlers(): void {
    console.log('üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π WhatsApp...');

    this.client.on('loading_screen', (percent: number, message: string) => {
      console.log(`üì± –ó–∞–≥—Ä—É–∑–∫–∞ WhatsApp —Å–µ—Å—Å–∏–∏: ${percent}% - ${message}`);
    });


    this.client.on('qr', (qr: string) => {
      console.log('üîê QR –∫–æ–¥ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ WhatsApp:');
      console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞');
      console.log('üì± –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç QR –∫–æ–¥ —Å –ø–æ–º–æ—â—å—é WhatsApp –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ:');
      console.log('   1. –û—Ç–∫—Ä–æ–π—Ç–µ WhatsApp –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ');
      console.log('   2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ > –°–≤—è–∑–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞');
      console.log('   3. –ù–∞–∂–º–∏—Ç–µ "–°–≤—è–∑–∞—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"');
      console.log('   4. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR –∫–æ–¥ –Ω–∏–∂–µ:');
      console.log('');
      

      try {
        qrcode.generate(qr, { small: true });
      } catch (error) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å QR –∫–æ–¥ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ');
      }
      

      console.log('');
      console.log('üìã –û—Ç–∫—Ä–æ–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è QR –∫–æ–¥–∞:');
      console.log(`https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=${encodeURIComponent(qr)}`);
      console.log('');
      console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
    });


    this.client.on('message', async (message: Message) => {
      console.log('üîî ==========================================');
      console.log('üîî –ü–û–õ–£–ß–ï–ù–û –°–û–ë–´–¢–ò–ï MESSAGE –û–¢ WHATSAPP');
      console.log('üîî ==========================================');
      console.log('üìù –î–µ—Ç–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', {
        from: message.from,
        body: message.body?.substring(0, 100),
        type: message.type,
        hasMedia: message.hasMedia,
        timestamp: new Date().toISOString(),
        isGroup: message.from.includes('@g.us'),
        isStatus: message.isStatus
      });
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∑–∞—è–≤–æ–∫:', !!this.onNewApplication);
      
      await this.handleIncomingMessage(message);
      
      console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      console.log('üîî ==========================================');
    });


    this.client.on('auth_failure', (msg: string) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ WhatsApp:', msg);
      console.log('üí° –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR –∫–æ–¥ –∑–∞–Ω–æ–≤–æ');
    });


    this.client.on('disconnected', (reason: string) => {
      console.log('üì± WhatsApp –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω:', reason);
      

      if (reason !== 'LOGOUT') {
        console.log('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º WhatsApp –∫–ª–∏–µ–Ω—Ç —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...');
        setTimeout(() => {
          this.restartClient();
        }, 3000);
      } else {
        console.log('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–µ–ª –≤—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
      }
    });


    this.client.on('change_state', (state: string) => {
      console.log('üì± WhatsApp —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å:', state);
      this.logClientState();
      

      if (state === 'CONNECTED') {
        setTimeout(() => {
          this.forceSaveSession();
        }, 1000);
      }
      

      if (state === 'UNPAIRED' || state === 'UNPAIRED_IDLE') {
        console.log('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–≤–∞–Ω–∏–µ, –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é...');
        setTimeout(() => {
          this.restartClient();
        }, 5000);
      }
    });


    this.client.on('remote_session_saved', () => {
      console.log('üíæ –°–µ—Å—Å–∏—è WhatsApp —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
    });


    this.client.on('authenticated', () => {
      console.log('‚úÖ WhatsApp –∫–ª–∏–µ–Ω—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      console.log('üîí –°–µ—Å—Å–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–∞ 10 –ª–µ—Ç –±–µ–∑ –ø–µ—Ä–µ–ª–æ–≥–∏–Ω–∞');
      this.logClientState();
      

      setTimeout(() => {
        this.forceSaveSession();
      }, 1000);
      

      setTimeout(() => {
        this.createAuthArchive();
      }, 3000);
    });


    this.client.on('auth_failure', (msg: string) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ WhatsApp:', msg);
      console.log('üí° –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR –∫–æ–¥ –∑–∞–Ω–æ–≤–æ');
    });


    this.client.on('change_state', (state: string) => {
      console.log('üì± WhatsApp —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', state);
      if (state === 'UNPAIRED' || state === 'UNPAIRED_IDLE') {
        console.log('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–≤–∞–Ω–∏–µ, –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é...');

      }
    });


    this.client.on('remote_session_saved', () => {
      console.log('üíæ –°–µ—Å—Å–∏—è WhatsApp —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –Ω–∞ –¥–∏—Å–∫');
      console.log('üîí –°–µ—Å—Å–∏—è –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –Ω–∞ 10 –ª–µ—Ç');
    });


    this.client.on('qr', (qr: string) => {
      console.log('üîê QR –∫–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω');
    });



    this.client.on('ready', async () => {
      console.log('‚úÖ WhatsApp –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
      this.logClientState();
      this.restartAttempts = 0;
      
      // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê
      if (!this.onNewApplication) {
        console.log('‚ùå‚ùå‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞—è–≤–æ–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
        console.log('‚ö†Ô∏è  –°–û–û–ë–©–ï–ù–ò–Ø –ò–ó WHATSAPP –ù–ï –ë–£–î–£–¢ –ü–ï–†–ï–°–´–õ–ê–¢–¨–°–Ø –í TELEGRAM!');
      } else {
        console.log('‚úÖ‚úÖ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞—è–≤–æ–∫ –∞–∫—Ç–∏–≤–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
        console.log('üöÄ WhatsApp –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram');
      }
      
      // –í–ê–ñ–ù–û: –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ
      try {
        const info = this.client.info;
        if (info) {
          console.log('üì± ==========================================');
          console.log('üì± –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û WHATSAPP –ê–ö–ö–ê–£–ù–¢–ï:');
          console.log('üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', info.wid?.user || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ');
          console.log('üì± –ü–æ–ª–Ω—ã–π WID:', info.wid?._serialized || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ');
          console.log('üì± –ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞:', info.pushname || '–ù–µ —É–∫–∞–∑–∞–Ω–æ');
          console.log('üì± –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:', info.platform || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ');
          console.log('üì± ==========================================');
        } else {
          console.log('‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ WhatsApp –∞–∫–∫–∞—É–Ω—Ç–µ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
        }
      } catch (error) {
        console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ:', error);
      }

      setTimeout(() => {
        this.forceSaveSession();
      }, 2000);
      

      setTimeout(() => {
        this.createAuthArchive();
      }, 5000);


      try {
        const chats = await this.client.getChats();
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${chats.length} —á–∞—Ç–æ–≤`);
        console.log('üí° –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      } catch (error) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤:', error);
      }
    });


    process.on('uncaughtException', (error) => {
      if (error.message.includes('Protocol error') || error.message.includes('Execution context was destroyed') || error.message.includes('Session closed')) {
        console.log('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Puppeteer, –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é...');
        console.log('üí° –û—à–∏–±–∫–∞:', error.message);
        

        setTimeout(() => {
          this.restartClient();
        }, 10000);
      }
    });

    process.on('unhandledRejection', (reason) => {
      if (reason && typeof reason === 'object' && 'message' in reason) {
        const error = reason as Error;
        if (error.message.includes('Protocol error') || error.message.includes('Execution context was destroyed') || error.message.includes('Session closed')) {
          console.log('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ Promise (Puppeteer), –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é...');
          console.log('üí° –û—à–∏–±–∫–∞:', error.message);
          

          setTimeout(() => {
            this.restartClient();
          }, 10000);
        }
      }
    });
  }


  setApplicationHandler(handler: (application: Application) => Promise<void>): void {
    console.log('üîß ==========================================');
    console.log('üîß –£–°–¢–ê–ù–û–í–ö–ê –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê –ó–ê–Ø–í–û–ö');
    console.log('üîß ==========================================');
    console.log('üîß –ü–æ–ª—É—á–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫:', typeof handler);
    console.log('üîß –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —è–≤–ª—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π:', typeof handler === 'function');
    
    this.onNewApplication = handler;
    
    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞—è–≤–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', !!this.onNewApplication);
    console.log('üëÅÔ∏è  –¢–µ–ø–µ—Ä—å WhatsApp –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram');
    console.log('üîß ==========================================');
  }


  private async handleIncomingMessage(message: Message): Promise<void> {
    try {
      console.log('üì® ==========================================');
      console.log('üì® –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò –í–•–û–î–Ø–©–ï–ì–û –°–û–û–ë–©–ï–ù–ò–Ø');
      console.log('üì® ==========================================');
      console.log('üì® –î–µ—Ç–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', {
        from: message.from,
        body: message.body,
        type: message.type,
        isStatus: message.isStatus,
        hasMedia: message.hasMedia
      });


      if (!this.client) {
        console.log('‚ùå WhatsApp –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        return;
      }


      if (message.from.includes('@g.us')) {
        console.log('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã');
        return;
      }
      
      if (message.isStatus) {
        console.log('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ç—É—Å');
        return;
      }


      const serviceMessageTypes = [
        'e2e_notification',
        'notification_template', 
        'call_log',
        'system',
        'protocol',
        'presence',
        'read_receipt',
        'revoked',
        'ephemeral',
        'notification'
      ];

      if (serviceMessageTypes.includes(message.type)) {
        console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞: ${message.type}`);
        return;
      }


      if (!message.body && !message.hasMedia) {
        console.log('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
        return;
      }


      const contact = await message.getContact();
      const userPhone = contact.number;
      const userName = contact.name || contact.pushname || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
      const userMessage = message.body;

      console.log('üë§ ==========================================');
      console.log('üë§ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï:');
      console.log('üë§ –¢–µ–ª–µ—Ñ–æ–Ω:', userPhone);
      console.log('üë§ –ò–º—è:', userName);
      console.log('üë§ –°–æ–æ–±—â–µ–Ω–∏–µ:', userMessage?.substring(0, 100));
      console.log('üë§ ==========================================');




      let messageType: Application['messageType'] = 'text';
      let mediaUrls: string[] = [];

      if (message.hasMedia) {
        try {
          const media = await message.downloadMedia();
          if (media) {
            const mediaUrl = await this.saveMediaFile(media, userPhone);
            if (mediaUrl) {
              mediaUrls.push(mediaUrl);
            }


            if (message.type === 'image') {
              messageType = 'image';
            } else if (message.type === 'video') {
              messageType = 'video';
            } else if (message.type === 'document') {
              messageType = 'document';
            } else if (message.type === 'audio' || message.type === 'ptt') {
              messageType = 'audio';
            }
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–∞:', error);
        }
      }


      const application: Application = {
        source: 'whatsapp',
        whatsappUserId: userPhone,
        whatsappUserName: userName,
        whatsappUserPhone: userPhone,
        userMessage: userMessage,
        name: userName,
        phone: userPhone,
        messageType: messageType,
        mediaUrls: mediaUrls.length > 0 ? mediaUrls : undefined
      };

      console.log('üì¶ ==========================================');
      console.log('üì¶ –°–û–ó–î–ê–ù–ê –ó–ê–Ø–í–ö–ê –î–õ–Ø –û–¢–ü–†–ê–í–ö–ò:');
      console.log('üì¶ Source:', application.source);
      console.log('üì¶ Phone:', application.whatsappUserPhone);
      console.log('üì¶ Name:', application.whatsappUserName);
      console.log('üì¶ Message:', application.userMessage?.substring(0, 100));
      console.log('üì¶ MessageType:', application.messageType);
      console.log('üì¶ ==========================================');


      if (this.onNewApplication) {
        console.log('üöÄ ==========================================');
        console.log('üöÄ –ü–ï–†–ï–°–´–õ–ê–ï–ú –ó–ê–Ø–í–ö–£ –í TELEGRAM');
        console.log('üöÄ ==========================================');
        console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞—è–≤–æ–∫ –Ω–∞–π–¥–µ–Ω');
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É...');
        
        try {
          await this.onNewApplication(application);
          console.log('‚úÖ‚úÖ‚úÖ –ó–ê–Ø–í–ö–ê –£–°–ü–ï–®–ù–û –û–¢–ü–†–ê–í–õ–ï–ù–ê –í TELEGRAM');
        } catch (error) {
          console.error('‚ùå‚ùå‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –û–¢–ü–†–ê–í–ö–ï –ó–ê–Ø–í–ö–ò –í TELEGRAM:', error);
          console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error instanceof Error ? error.message : error);
          console.error('‚ùå Stack trace:', error instanceof Error ? error.stack : 'N/A');
        }
      } else {
        console.log('‚ùå‚ùå‚ùå ==========================================');
        console.log('‚ùå‚ùå‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê!');
        console.log('‚ùå‚ùå‚ùå –û–ë–†–ê–ë–û–¢–ß–ò–ö –ó–ê–Ø–í–û–ö –ù–ï –ù–ê–ô–î–ï–ù!');
        console.log('‚ùå‚ùå‚ùå ==========================================');
        console.log('üîç –°–æ—Å—Ç–æ—è–Ω–∏–µ onNewApplication:', this.onNewApplication);
        console.log('‚ö†Ô∏è  –°–û–û–ë–©–ï–ù–ò–ï –ù–ï –ë–£–î–ï–¢ –û–¢–ü–†–ê–í–õ–ï–ù–û –í TELEGRAM!');
        console.log('üîß –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–∑–≤–∞—Ç—å setApplicationHandler() –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞');
      }


      if (!this.thanksMessageSent.has(userPhone)) {
        const thanksText = `–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É!\n–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –í–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è`;
        console.log('üí¨ ==========================================');
        console.log('üí¨ –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ë–õ–ê–ì–û–î–ê–†–ù–û–°–¢–¨ –ö–õ–ò–ï–ù–¢–£');
        console.log('üí¨ –ö–ª–∏–µ–Ω—Ç:', userPhone);
        console.log('üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:', thanksText);
        console.log('üí¨ ==========================================');
        
        await message.reply(thanksText);
        this.thanksMessageSent.add(userPhone);
        
        console.log('‚úÖ –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç—É');
      } else {
        console.log('‚è≠Ô∏è –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —ç—Ç–æ–º—É –∫–ª–∏–µ–Ω—Ç—É —Ä–∞–Ω–µ–µ');
      }

      console.log('üèÅ ==========================================');
      console.log('üèÅ –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û');
      console.log('üèÅ ==========================================');

    } catch (error) {
      console.error('‚ùå‚ùå‚ùå ==========================================');
      console.error('‚ùå‚ùå‚ùå –û–®–ò–ë–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –°–û–û–ë–©–ï–ù–ò–Ø!');
      console.error('‚ùå‚ùå‚ùå ==========================================');
      console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error);
      console.error('‚ùå Stack:', error instanceof Error ? error.stack : 'N/A');
      

      if (error instanceof Error && 
          (error.message.includes('Protocol error') || 
           error.message.includes('Execution context was destroyed') ||
           error.message.includes('Target closed'))) {
        console.log('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ Puppeteer –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
        console.log('üí° –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –Ω–æ —Å–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
      }
    }
  }


  private async saveMediaFile(media: any, userPhone: string): Promise<string | null> {
    try {
      const timestamp = Date.now();
      const extension = media.mimetype.split('/')[1] || 'bin';
      const filename = `whatsapp_${userPhone}_${timestamp}.${extension}`;
      

      console.log(`–ú–µ–¥–∏–∞ —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filename}`);
      

      return `https://your-server.com/media/${filename}`;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–¥–∏–∞ —Ñ–∞–π–ª–∞:', error);
      return null;
    }
  }


  async sendTextMessage(to: string, message: string): Promise<boolean> {
    try {
      const chatId = `${to}@c.us`;
      await this.client.sendMessage(chatId, message);
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é WhatsApp:', error);
      

      if (error instanceof Error && 
          (error.message.includes('Protocol error') || 
           error.message.includes('Execution context was destroyed') ||
           error.message.includes('Target closed'))) {
        console.log('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ Puppeteer –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
        console.log('üí° –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –Ω–æ —Å–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
      }
      
      return false;
    }
  }


  async sendMediaMessage(to: string, mediaUrl: string, mediaType: 'image' | 'video' | 'document' | 'audio', caption?: string): Promise<boolean> {
    try {
      const chatId = `${to}@c.us`;
      const media = await MessageMedia.fromUrl(mediaUrl);
      
      if (caption && (mediaType === 'image' || mediaType === 'video' || mediaType === 'document')) {
        (media as any).caption = caption;
      }
      
      await this.client.sendMessage(chatId, media);
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é WhatsApp:', error);
      return false;
    }
  }


  async sendManagerReply(reply: ManagerReply): Promise<boolean> {
    if (reply.targetPlatform !== 'whatsapp') {
      return false;
    }

    try {

      if (reply.message) {

        let cleanMessage = reply.message;
        

        cleanMessage = cleanMessage.replace(/https:\/\/t\.me\/[^\s\n]+/g, '');
        

        cleanMessage = cleanMessage.replace(/@[a-zA-Z0-9_]+/g, '');
        

        cleanMessage = cleanMessage.replace(/\[[^\]]+\]/g, '');
        cleanMessage = cleanMessage.replace(/\([^)]*message[^)]*\)/gi, '');
        cleanMessage = cleanMessage.replace(/\([^)]*thread[^)]*\)/gi, '');
        

        cleanMessage = cleanMessage.replace(/\n\s*\n/g, '\n').trim();
        cleanMessage = cleanMessage.replace(/\s+/g, ' ').trim();
        

        cleanMessage = cleanMessage.replace(/^\s*\n+|\n+\s*$/g, '');
        

        if (!cleanMessage || cleanMessage.length < 2) {
          cleanMessage = '–û—Ç–≤–µ—Ç –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞';
        }
        

        const telegramLink = `https://t.me/${reply.managerUsername.replace('@', '')}`;
        const managerMessage = `${cleanMessage}\n\nüì± –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –≤ Telegram: ${telegramLink}`;
        await this.sendTextMessage(reply.targetUserId, managerMessage);
      }


      if (reply.mediaUrls && reply.mediaUrls.length > 0) {
        for (const mediaUrl of reply.mediaUrls) {

          if (this.isServiceImage(mediaUrl)) {
            console.log('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:', mediaUrl);
            continue;
          }
          

          const mediaType = this.getMediaTypeFromUrl(mediaUrl);
          await this.sendMediaMessage(reply.targetUserId, mediaUrl, mediaType);
        }
      }

      console.log(`–û—Ç–≤–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é WhatsApp: ${reply.targetUserId}`);
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ WhatsApp:', error);
      return false;
    }
  }


  private getMediaTypeFromUrl(url: string): 'image' | 'video' | 'document' | 'audio' {
    const extension = url.split('.').pop()?.toLowerCase();
    
    if (['jpg', 'jpeg', 'png', 'gif', 'webp'].includes(extension || '')) {
      return 'image';
    } else if (['mp4', 'avi', 'mov', 'wmv', 'flv'].includes(extension || '')) {
      return 'video';
    } else if (['mp3', 'wav', 'ogg', 'm4a'].includes(extension || '')) {
      return 'audio';
    } else {
      return 'document';
    }
  }


  private isServiceImage(url: string): boolean {
    const lowerUrl = url.toLowerCase();
    

    const sizeMatch = url.match(/[?&]size=(\d+)/);
    if (sizeMatch) {
      const size = parseInt(sizeMatch[1]);
      if (size <= 200) {
        return true;
      }
    }
    

    const avatarPatterns = [
      'avatar',
      'profile',
      'user_photo',
      'chat_photo',
      'thumb',
      'thumbnail',
      'icon',
      'emoji',
      'sticker'
    ];
    
    for (const pattern of avatarPatterns) {
      if (lowerUrl.includes(pattern)) {
        return true;
      }
    }
    

    const dimensionMatch = url.match(/[?&](width|height)=(\d+)/);
    if (dimensionMatch) {
      const dimension = parseInt(dimensionMatch[2]);
      if (dimension <= 200) {
        return true;
      }
    }
    
    return false;
  }

  private async restartClient(): Promise<void> {
    try {
      this.restartAttempts++;
      console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ WhatsApp –∫–ª–∏–µ–Ω—Ç–∞ #${this.restartAttempts}`);
      
      if (this.restartAttempts > 5) {
        console.log('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞');
        return;
      }
      

      const savedApplicationHandler = this.onNewApplication;
      console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞—è–≤–æ–∫ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º:', !!savedApplicationHandler);


      try {
        if (this.client) {
          await this.client.destroy();
        }
      } catch (error) {
        console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º):', error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      }


      await new Promise(resolve => setTimeout(resolve, 5000));
      

      this.client = new Client({
        authStrategy: new LocalAuth({
          clientId: "nord-laundry-whatsapp",
          dataPath: "./.wwebjs_auth"
        }),
        puppeteer: {
          headless: true,
          args: [
            '--no-sandbox',
            '--disable-setuid-sandbox',
            '--disable-dev-shm-usage',
            '--disable-accelerated-2d-canvas',
            '--no-first-run',
            '--no-zygote',
            '--disable-gpu',
            '--disable-web-security',
            '--disable-features=VizDisplayCompositor',
            '--disable-background-timer-throttling',
            '--disable-backgrounding-occluded-windows',
            '--disable-renderer-backgrounding',
            '--disable-extensions',
            '--disable-plugins',
            '--disable-default-apps',
            '--disable-sync',
            '--disable-translate',
            '--hide-scrollbars',
            '--mute-audio',
            '--no-default-browser-check',
            '--no-pings',
            '--disable-logging',
            '--disable-permissions-api',
            '--disable-presentation-api',
            '--disable-print-preview',
            '--disable-speech-api',
            '--disable-file-system',
            '--disable-notifications',
            '--disable-background-networking',
            '--disable-component-extensions-with-background-pages',
            '--disable-ipc-flooding-protection',
            '--user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
        ],
        timeout: 60000,
        ignoreDefaultArgs: ['--disable-extensions'],
        handleSIGINT: false,
        handleSIGTERM: false,
        handleSIGHUP: false
        },
        webVersionCache: {
          type: 'remote',
          remotePath: 'https://raw.githubusercontent.com/wppconnect-team/wa-version/main/html/2.2412.54.html',
        },
        authTimeoutMs: 0,
        qrMaxRetries: 0,
        restartOnAuthFail: false,
        takeoverOnConflict: false,
        takeoverTimeoutMs: 0
      });


      this.setupEventHandlers();
      

      if (savedApplicationHandler) {
        this.onNewApplication = savedApplicationHandler;
        console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞—è–≤–æ–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞:', !!this.onNewApplication);
        console.log('üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ message...');
      } else {
        console.log('‚ùå –ö–†–ò–¢–ò–ß–ù–û: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞—è–≤–æ–∫ –ù–ï –ë–´–õ –°–û–•–†–ê–ù–ï–ù!');
      }
      

      this.client.initialize();
      console.log('‚úÖ WhatsApp –∫–ª–∏–µ–Ω—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ WhatsApp –∫–ª–∏–µ–Ω—Ç–∞:', error);
    }
  }



  private async logClientState(): Promise<void> {
    try {
      if (!this.client) {
        console.log('üìä –ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        return;
      }


      let state = 'UNKNOWN';
      try {
        state = await this.client.getState();
      } catch (error) {
        state = 'ERROR';
        console.log('üìä –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      }

      const info = this.client.info;
      const hasPage = this.client.pupPage && !this.client.pupPage.isClosed();
      
      console.log('üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ WhatsApp –∫–ª–∏–µ–Ω—Ç–∞:', {
        state: state,
        isReady: info ? '–î–∞' : '–ù–µ—Ç',
        hasPage: hasPage ? '–î–∞' : '–ù–µ—Ç',
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      console.log('üìä –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞:', error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
    }
  }


  private async forceSaveSession(): Promise<void> {
    try {

      if (!this.client) {
        console.log('üìä –ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏');
        return;
      }


      let state = 'UNKNOWN';
      try {
        state = await this.client.getState();
      } catch (error) {
        console.log('üìä –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        return;
      }

      if (state !== 'CONNECTED' && state !== 'OPENING') {
        console.log(`üìä –ö–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω (—Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${state}), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏`);
        return;
      }


      if (!this.client.pupPage || this.client.pupPage.isClosed()) {
        console.log('üìä –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏');
        return;
      }


      await this.client.pupPage.evaluate(() => {
        try {

          if (window.localStorage) {
            const now = Date.now();
            const tenYears = 315360000000;
            
            window.localStorage.setItem('wwebjs_session_saved', now.toString());
            window.localStorage.setItem('wwebjs_session_duration', tenYears.toString());
            window.localStorage.setItem('wwebjs_session_configured', 'true');
            window.localStorage.setItem('wwebjs_session_keep_alive', 'true');
            window.localStorage.setItem('wwebjs_session_auto_reconnect', 'true');
            window.localStorage.setItem('wwebjs_session_expires', (now + tenYears).toString());
            window.localStorage.setItem('wwebjs_session_persistent', 'true');
            

            window.localStorage.setItem('wwebjs_session_never_expire', 'true');
            window.localStorage.setItem('wwebjs_session_auto_refresh', 'true');
            window.localStorage.setItem('wwebjs_session_backup_enabled', 'true');
          }
          

          if (window.sessionStorage) {
            window.sessionStorage.setItem('wwebjs_session_active', 'true');
            window.sessionStorage.setItem('wwebjs_session_timestamp', Date.now().toString());
          }
        } catch (e) {
          console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ localStorage:', e);
        }
      });
      
      console.log('üíæ –°–µ—Å—Å–∏—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –Ω–∞ 10 –ª–µ—Ç');
      

      if (state === 'CONNECTED') {
        await this.createAuthArchive();
      }
      
    } catch (error) {

      if (error instanceof Error && !error.message.includes('Session closed') && !error.message.includes('Target closed')) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é:', error.message);
      }
    }
  }


  private async createAuthArchive(): Promise<void> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∞—Ä—Ö–∏–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –Ω–µ—Ç, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —è–≤–Ω–æ –≤–∫–ª—é—á–µ–Ω–æ)
    const shouldCreateArchive = process.env.CREATE_AUTH_ARCHIVE === 'true';
    
    if (!shouldCreateArchive) {
      console.log('üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ –æ—Ç–∫–ª—é—á–µ–Ω–æ (CREATE_AUTH_ARCHIVE != true)');
      return;
    }
    
    try {
      const fs = await import('fs');
      const path = await import('path');
      const { exec } = await import('child_process');
      const { promisify } = await import('util');
      const execAsync = promisify(exec);

      const authDir = '.wwebjs_auth';
      const archiveName = 'whatsapp_auth_latest.tar.gz';


      if (!fs.existsSync(authDir)) {
        console.log('üìÅ –ü–∞–ø–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞');
        return;
      }


      if (fs.existsSync(archiveName)) {
        fs.unlinkSync(archiveName);
        console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –∞—Ä—Ö–∏–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      }


      console.log('üì¶ –û–±–Ω–æ–≤–ª—è–µ–º –∞—Ä—Ö–∏–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –Ω–∞ VPS...');
      await execAsync(`tar -czf ${archiveName} ${authDir}/`);
      

      const stats = fs.statSync(archiveName);
      const sizeInMB = (stats.size / (1024 * 1024)).toFixed(2);
      
      console.log(`‚úÖ –ê—Ä—Ö–∏–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω: ${archiveName} (${sizeInMB} MB)`);
      console.log(`üìã –î–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –Ω–∞ VPS —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª: ${archiveName}`);
      console.log(`üí° –ù–∞ VPS –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: tar -xzf ${archiveName}`);
      
    } catch (error) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞—Ä—Ö–∏–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
    }
  }


  start(): void {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WhatsApp –∫–ª–∏–µ–Ω—Ç–∞...');
    console.log('üîí –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π —Å–µ—Å—Å–∏–∏ (10 –ª–µ—Ç)...');
    
    // –ö–†–ò–¢–ò–ß–ù–û: –°–æ–∑–¥–∞–µ–º ./tmp –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    this.ensureTmpDirectory();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é
    this.checkExistingSession();
    
    this.client.initialize();
    console.log('‚úÖ WhatsApp –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    


    setInterval(async () => {
      await this.forceSaveSession();
      await this.logClientState();
      await this.monitorSessionHealth();
    }, 5 * 60 * 1000);

  }

  private ensureTmpDirectory(): void {
    try {
      const fs = require('fs');
      const tmpDir = './tmp';
      
      if (!fs.existsSync(tmpDir)) {
        console.log('üìÅ –°–æ–∑–¥–∞–µ–º ./tmp –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é...');
        fs.mkdirSync(tmpDir, { recursive: true });
        console.log('‚úÖ ./tmp –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞');
      }
      
      // –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∞–ø–∫–∏
      const subdirs = ['chromium-user-data', 'chromium-data', 'chromium-cache'];
      subdirs.forEach(dir => {
        const fullPath = `${tmpDir}/${dir}`;
        if (!fs.existsSync(fullPath)) {
          fs.mkdirSync(fullPath, { recursive: true });
        }
      });
      
      console.log('‚úÖ –í—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≥–æ—Ç–æ–≤—ã');
    } catch (error) {
      console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ./tmp –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:', error);
    }
  }


  stop(): void {
    console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ WhatsApp –∫–ª–∏–µ–Ω—Ç–∞...');
    try {
      if (this.client) {
        this.client.destroy();
        console.log('‚úÖ WhatsApp –∫–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      }
    } catch (error) {
      console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ WhatsApp –∫–ª–∏–µ–Ω—Ç–∞:', error);
    }
  }


  private async checkExistingSession(): Promise<void> {
    try {
      const fs = await import('fs');
      const authDir = '.wwebjs_auth/session-nord-laundry-whatsapp';
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ —Å–µ—Å—Å–∏–∏
      const forceReset = process.env.WHATSAPP_FORCE_RESET === 'true';
      
      if (forceReset && fs.existsSync(authDir)) {
        console.log('üö® –†–ï–ñ–ò–ú –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ì–û –°–ë–†–û–°–ê WHATSAPP_FORCE_RESET=true');
        console.log('üóëÔ∏è  –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é...');
        
        try {
          // –£–¥–∞–ª—è–µ–º –≤—Å—é –ø–∞–ø–∫—É .wwebjs_auth
          const { exec } = await import('child_process');
          const { promisify } = await import('util');
          const execAsync = promisify(exec);
          
          await execAsync('rm -rf .wwebjs_auth/');
          console.log('‚úÖ –°–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
          console.log('üîê –ë—É–¥–µ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω QR –∫–æ–¥ –¥–ª—è –Ω–æ–≤–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
          console.log('‚ö†Ô∏è  –ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —É–¥–∞–ª–∏—Ç–µ WHATSAPP_FORCE_RESET –∏–∑ .env –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞');
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
        }
        return;
      }
      
      // –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫—É–¥–∞ –±–µ—Ä–µ—Ç—Å—è —Å–µ—Å—Å–∏—è
      if (fs.existsSync('.wwebjs_auth')) {
        console.log('‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ü–ê–ü–ö–ê .wwebjs_auth');
        console.log('üìÇ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ:');
        const { exec } = await import('child_process');
        const { promisify } = await import('util');
        const execAsync = promisify(exec);
        try {
          const { stdout } = await execAsync('ls -lah .wwebjs_auth/');
          console.log(stdout);
        } catch (e) {
          console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ');
        }
      }
      
      if (fs.existsSync(authDir)) {
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è WhatsApp');
        

        const stats = fs.statSync(authDir);
        const ageInDays = (Date.now() - stats.mtime.getTime()) / (1000 * 60 * 60 * 24);
        
        console.log(`üìÖ –í–æ–∑—Ä–∞—Å—Ç —Å–µ—Å—Å–∏–∏: ${Math.floor(ageInDays)} –¥–Ω–µ–π`);
        
        if (ageInDays < 365) {
          console.log('‚úÖ –°–µ—Å—Å–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–π, –ø–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ö–æ–¥–∞...');
        } else {
          console.log('‚ö†Ô∏è –°–µ—Å—Å–∏—è —Å—Ç–∞—Ä–∞—è, –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
        }
      } else {
        console.log('‚ö†Ô∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è QR –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏:', error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
    }
  }



  private async monitorSessionHealth(): Promise<void> {
    try {
      if (!this.client) {
        console.log('üìä –ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞');
        return;
      }

      let state = 'UNKNOWN';
      try {
        state = await this.client.getState();
      } catch (error) {
        console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');


        console.log('üí° –û–∂–∏–¥–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞, –Ω–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º...');
        return;
      }

      console.log(`üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ WhatsApp: ${state}`);


      if (state === 'CONNECTED') {

        this.restartAttempts = 0;
        console.log('‚úÖ WhatsApp –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ');
        

        try {
          if (this.client.pupPage && !this.client.pupPage.isClosed()) {
            const sessionActive = await this.client.pupPage.evaluate(() => {
              return window.localStorage.getItem('wwebjs_session_active') === 'true';
            });
            
            if (!sessionActive) {
              console.log('‚ö†Ô∏è –°–µ—Å—Å–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ –≤ localStorage, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º...');
              await this.forceSaveSession();
            }
          }
        } catch (error) {
          console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏:', error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        }
      } else if (state === 'UNPAIRED' || state === 'UNPAIRED_IDLE') {
        console.log('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–≤–∞–Ω–∏–µ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ');
        console.log('üí° –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ QR –∫–æ–¥');

      } else if (state === 'TIMEOUT' || state === 'CONFLICT') {
        console.log('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Å—Å–∏–µ–π:', state);
        console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ –æ—Ç–∫—Ä—ã—Ç –ª–∏ WhatsApp Web –≤ –±—Ä–∞—É–∑–µ—Ä–µ');

      } else if (state === 'OPENING') {
        console.log('üì± –°–µ—Å—Å–∏—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è, –æ–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...');

      } else {
        console.log(`üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏: ${state} - –æ–∂–∏–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞...`);

      }
    } catch (error) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ —Å–µ—Å—Å–∏–∏:', error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
    }
  }


  clearThanksHistory(): void {
    this.thanksMessageSent.clear();
    console.log('üßπ –ò—Å—Ç–æ—Ä–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –±–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—á–∏—â–µ–Ω–∞');
  }
}