#!/usr/bin/env node

const http = require('http');

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ —Å —Å–∞–π—Ç–∞
const testApplication = {
  name: "–¢–µ—Å—Ç –°–∞–π—Ç–æ–≤–∏—á",
  phone: "+7 (999) 123-45-67",
  sphere: "–ü—Ä–∞—á–µ—á–Ω–∞—è",
  source: "website_form",
  userMessage: "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–¥–æ–≤",
  messageType: "text"
};

const postData = JSON.stringify(testApplication);

const options = {
  hostname: 'localhost',
  port: 3001,
  path: '/api/application',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
    'Content-Length': Buffer.byteLength(postData)
  }
};

console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º API endpoint –¥–ª—è –∑–∞—è–≤–æ–∫ —Å —Å–∞–π—Ç–∞...');
console.log('üìã –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É:', testApplication);

const req = http.request(options, (res) => {
  console.log(`üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${res.statusCode}`);
  console.log(`üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:`, res.headers);

  let data = '';
  res.on('data', (chunk) => {
    data += chunk;
  });

  res.on('end', () => {
    console.log('üì§ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data);
    
    if (res.statusCode === 200) {
      console.log('‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ! –ó–∞—è–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞ –≤ Telegram –≥—Ä—É–ø–ø–µ –≤ –Ω–æ–≤–æ–º —Ç—Ä–µ–¥–µ.');
    } else {
      console.log('‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞.');
    }
  });
});

req.on('error', (error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
  console.log('üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ webhook-server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3001');
});

req.write(postData);
req.end();
