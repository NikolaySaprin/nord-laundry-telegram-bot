#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–æ–∫ —Å —Å–∞–π—Ç–∞
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node test-website-application.mjs
 */

import http from 'http';

const WEBHOOK_URL = process.env.WEBHOOK_URL || 'http://localhost:3001';

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º
const testApplications = [
  {
    name: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ - –§–æ—Ä–º–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞',
    data: {
      source: 'contact_form',
      name: '–ò–≤–∞–Ω –¢–µ—Å—Ç–æ–≤',
      phone: '+79991234567',
      sphere: '–ì–æ—Å—Ç–∏–Ω–∏—á–Ω—ã–π –±–∏–∑–Ω–µ—Å',
      messageType: 'text'
    }
  },
  {
    name: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ - –ù–∏–∂–Ω—è—è —Ñ–æ—Ä–º–∞',
    data: {
      source: 'bottom_form',
      name: '–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞',
      phone: '+79997654321',
      messageType: 'text'
    }
  },
  {
    name: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ - –£—Å–ª—É–≥–∏',
    data: {
      source: 'services_form',
      name: '–ê–ª–µ–∫—Å–µ–π –°–∏–¥–æ—Ä–æ–≤',
      phone: '+79995554433',
      sphere: '–†–µ—Å—Ç–æ—Ä–∞–Ω',
      messageType: 'text'
    }
  },
  {
    name: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ - –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ',
    data: {
      source: 'modal_form',
      name: '–ï–ª–µ–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞',
      phone: '+79993332211',
      messageType: 'text'
    }
  },
  {
    name: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ - –û–±—â–∞—è —Ñ–æ—Ä–º–∞',
    data: {
      source: 'website_form',
      name: '–î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤',
      phone: '+79991112233',
      sphere: '–ú–µ–¥–∏—Ü–∏–Ω–∞',
      messageType: 'text'
    }
  }
];

function sendApplication(application) {
  return new Promise((resolve, reject) => {
    const data = JSON.stringify(application.data);
    
    const options = {
      hostname: new URL(WEBHOOK_URL).hostname,
      port: new URL(WEBHOOK_URL).port || 80,
      path: '/api/application',
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': data.length
      }
    };

    const req = http.request(options, (res) => {
      let responseData = '';

      res.on('data', (chunk) => {
        responseData += chunk;
      });

      res.on('end', () => {
        try {
          const response = JSON.parse(responseData);
          resolve({ success: res.statusCode === 200, response, statusCode: res.statusCode });
        } catch (error) {
          resolve({ success: false, error: 'Invalid JSON response', statusCode: res.statusCode });
        }
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    req.write(data);
    req.end();
  });
}

async function runTests() {
  console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∑–∞—è–≤–æ–∫ —Å —Å–∞–π—Ç–∞...\n');
  console.log(`üåê Webhook URL: ${WEBHOOK_URL}/api/application\n`);
  console.log('‚îÅ'.repeat(60));
  
  let successCount = 0;
  let failCount = 0;

  for (let i = 0; i < testApplications.length; i++) {
    const test = testApplications[i];
    
    console.log(`\nüìã –¢–µ—Å—Ç ${i + 1}/${testApplications.length}: ${test.name}`);
    console.log(`   –ò—Å—Ç–æ—á–Ω–∏–∫: ${test.data.source}`);
    console.log(`   –ò–º—è: ${test.data.name}`);
    console.log(`   –¢–µ–ª–µ—Ñ–æ–Ω: ${test.data.phone}`);
    
    try {
      const result = await sendApplication(test);
      
      if (result.success) {
        console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (HTTP ${result.statusCode})`);
        console.log(`   üì® –û—Ç–≤–µ—Ç:`, result.response);
        successCount++;
      } else {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ (HTTP ${result.statusCode})`);
        console.log(`   üì® –û—Ç–≤–µ—Ç:`, result.response || result.error);
        failCount++;
      }
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`);
      failCount++;
    }
    
    // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    if (i < testApplications.length - 1) {
      console.log('   ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 2 —Å–µ–∫—É–Ω–¥—ã...');
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
  }
  
  console.log('\n' + '‚îÅ'.repeat(60));
  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
  console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount}`);
  console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${failCount}`);
  console.log(`   üìà –í—Å–µ–≥–æ: ${testApplications.length}`);
  
  console.log('\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram –≥—Ä—É–ø–ø—É:');
  console.log('   - –î–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω—ã –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ç–µ–º—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞—è–≤–∫–∏');
  console.log('   - –ù–∞–∑–≤–∞–Ω–∏—è —Ç–µ–º –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º');
  console.log('   - –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–î–î.–ú–ú.–ì–ì–ì–ì, –ß–ß:–ú–ú:–°–° (–ú–°–ö)"');
  
  if (failCount > 0) {
    console.log('\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
    console.log('   1. –†–∞–±–æ—Ç–∞–µ—Ç –ª–∏ webhook-server: pm2 status');
    console.log('   2. –î–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –ø–æ—Ä—Ç 3001: netstat -tulpn | grep 3001');
    console.log('   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: pm2 logs nord-laundry-bot --lines 50');
  }
  
  console.log('\n');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runTests().catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});
